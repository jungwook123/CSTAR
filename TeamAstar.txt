#include <stdio.h>
#include <stdlib.h>
#include <Windows.h>
#include <conio.h>
#include <math.h>
#include <string.h>
#include <time.h>
#include <psapi.h>  
#pragma comment(lib, "psapi.lib")
#define UP 72
#define DOWN 80
#define LEFT 75
#define RIGHT 77

void gotoxy(int x, int y) {
    COORD pos = { (SHORT)x, (SHORT)y };
    SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), pos);
}

int dx[4] = { 0, 1, 0, -1 }, dy[4] = { -1, 0, 1, 0 };

int field[1001][1001] = {
    {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15},
    {'A', 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {'B', 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {'C', 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {'D', 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {'E', 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {'F', 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {'G', 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {'H', 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {'I', 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {'J', 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {'K', 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {'L', 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {'M', 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {'N', 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {'O', 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
};


typedef struct {
    int x, y;
    int g, h;
    int parent_x, parent_y;
} Node;

int visited[20][20];
Node parent[20][20];
int goalX = -1, goalY = -1;

int heuristic(int x1, int y1, int x2, int y2) {
    return abs(x1 - x2) + abs(y1 - y2);
}

void draw_path(int gx, int gy) {
    int x = gx, y = gy;
    while (!(x == 1 && y == 1)) {
        int px = parent[y][x].parent_x;
        int py = parent[y][x].parent_y;
        if (field[y][x] == 0 || field[y][x] == -4)
            field[y][x] = '*';
        x = px;
        y = py;
    }
}
void print_memory_usage() {
    PROCESS_MEMORY_COUNTERS pmc;
    if (GetProcessMemoryInfo(GetCurrentProcess(), &pmc, sizeof(pmc))) {
        printf("- 메모리 사용량: %lu KB\n", pmc.WorkingSetSize / 1024);
    }
}

void A_star(int sx, int sy, int gx, int gy) { 
    LARGE_INTEGER freq, start, end;
    QueryPerformanceFrequency(&freq); // 초당 카운터 증가수 측정.
    QueryPerformanceCounter(&start);  // 시작 시간

    int visited_count = 0;

    memset(visited, 0, sizeof(visited));
    memset(parent, -1, sizeof(parent));
    Node open[1000];
    int openSize = 0;
    Node startNode = { sx, sy, 0, heuristic(sx, sy, gx, gy), -1, -1 };
    open[openSize++] = startNode;

    while (openSize > 0) {
        int idx = 0;
        for (int i = 1; i < openSize; i++) {
            if (open[i].g + open[i].h < open[idx].g + open[idx].h) // ㅁ* 함수식
                idx = i;
        }

        Node cur = open[idx];
        open[idx] = open[--openSize]; // 이건 그냥 열린 노드에서 요소 제거.

        if (visited[cur.y][cur.x]) continue;
        visited[cur.y][cur.x] = 1;
        parent[cur.y][cur.x] = cur;
        visited_count++;

        if (field[cur.y][cur.x] == 0)
            field[cur.y][cur.x] = -4;

        if (cur.x == gx && cur.y == gy) {
            draw_path(gx, gy);
            QueryPerformanceCounter(&end);  // 종료 시간
           
            double elapsed = (double)(end.QuadPart - start.QuadPart) * 1000.0 / freq.QuadPart; 
            printf("- 방문한 노드 수: %d개\n", visited_count);
            print_memory_usage();
            printf("\nA* 고정밀 수행 시간: %.4f ms\n", elapsed);
           
            return;
        }

        for (int d = 0; d < 4; d++) {
            int nx = cur.x + dx[d];
            int ny = cur.y + dy[d];
            if (nx < 1 || nx > 15 || ny < 1 || ny > 15) continue;
            if (field[ny][nx] == -1 || visited[ny][nx]) continue;

            Node next = { nx, ny, cur.g + 1, heuristic(nx, ny, gx, gy), cur.x, cur.y };
            open[openSize++] = next;
        }
    }

    QueryPerformanceCounter(&end);
    double elapsed = (double)(end.QuadPart - start.QuadPart) * 1000.0 / freq.QuadPart;
    printf("\nA* 고정밀 수행 시간: %.4f ms\n", elapsed);
}
void tmforldkfrhflwma(int sx, int sy, int gx, int gy) {
    LARGE_INTEGER freq, start, end;
    QueryPerformanceFrequency(&freq);
    QueryPerformanceCounter(&start);

    memset(visited, 0, sizeof(visited));
    memset(parent, -1, sizeof(parent));

    Node dist[20][20];
    for (int i = 0; i < 20; i++)
        for (int j = 0; j < 20; j++)
            dist[i][j].g = 1e9;

    dist[sy][sx].g = 0;
    dist[sy][sx].x = sx;
    dist[sy][sx].y = sy;
    dist[sy][sx].parent_x = -1;
    dist[sy][sx].parent_y = -1;
    int visited_count =0;
    Node pq[1000]; // 진짜 마음만큼은 우선순위 큐를 사용하고 싶었지만 나의 시간과 실력이 아직 부족한 관계로 난 그냥 배열을 사용한다. 이름만큼은 우선순위 큐.
    int size = 0;
    pq[size++] = dist[sy][sx];

    while (size > 0) {
        // 최소 거리 노드 찾기
        int idx = 0;
        for (int i = 1; i < size; i++)
            if (pq[i].g < pq[idx].g)
                idx = i;

        Node cur = pq[idx];
        pq[idx] = pq[--size];

        if (visited[cur.y][cur.x]) continue;
        visited[cur.y][cur.x] = 1;
        visited_count++;
        parent[cur.y][cur.x] = cur;

        if (field[cur.y][cur.x] == 0)
            field[cur.y][cur.x] = -4;

        if (cur.x == gx && cur.y == gy) {
            draw_path(gx, gy);
            QueryPerformanceCounter(&end);
            double elapsed = (double)(end.QuadPart - start.QuadPart) * 1000.0 / freq.QuadPart;
            printf("- 방문한 노드 수: %d개\n", visited_count);
            print_memory_usage();
            printf("\Dijkstra*  수행 시간: %.4f ms]\n", elapsed);
           
            return;
        }

        for (int d = 0; d < 4; d++) {
            int nx = cur.x + dx[d];
            int ny = cur.y + dy[d];
            if (nx < 1 || nx > 15 || ny < 1 || ny > 15) continue;
            if (field[ny][nx] == -1 || visited[ny][nx]) continue;

            int cost = cur.g + 1;
            if (cost < dist[ny][nx].g) {
                dist[ny][nx].g = cost;
                dist[ny][nx].x = nx;
                dist[ny][nx].y = ny;
                dist[ny][nx].parent_x = cur.x;
                dist[ny][nx].parent_y = cur.y;
                pq[size++] = dist[ny][nx];
            }
        }
    }

    QueryPerformanceCounter(&end);
    double elapsed = (double)(end.QuadPart - start.QuadPart) * 1000.0 / freq.QuadPart;
    printf("\n다익스트라 수행 시간 (실패): %.4f ms]\n", elapsed);
   
}



void print_field() {
    for (int i = 0; i <= 15; i++) {
        for (int j = 0; j <= 15; j++) {
            SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 7);

            if (field[i][j] >= 1 && field[i][j] <= 15)
                printf("%2d ", field[i][j]);
            else if (field[i][j] == 0)
                printf("%2c ", '-');
            else if (field[i][j] == -1)
                printf("%2c ", 'X');
            else if (field[i][j] == -2) {
                SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 10); //색입히기
                printf("%2c ", 'O');
            }
            else if (field[i][j] == -3) {
                SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 14);
                printf("%2c ", 'X');
            }
            else if (field[i][j] == '*') {
                SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 10);
                printf("%2c ", '*');
            }
            else if (field[i][j] == -4) {
                SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 12);
                printf("%2c ", '.');
            }
            else if (field[i][j] == '@')
                printf("%2c ", '@');
            else
                printf("%2c ", field[i][j]);
        }
        printf("\n");
    }
}

int main() {
    system("cls");
    
    int x = 7;
    char y = 'H';
    int running = 1;

    while (running) {
        field[1][1] = -2;

        int original = field[y - 'A' + 1][x];
        field[y - 'A' + 1][x] = -3;

        gotoxy(0, 0);
        print_field();

        field[y - 'A' + 1][x] = original;

        printf("방향키 이동 | ENTER: 장애물 배치 | SPACE: 목표(@) 설정 | /: 요소 삭제 | \\: 필드 초기화 ESC: 종료\n");

        // f, g, h 출력
        int cx = x;
        int cy = y - 'A' + 1;
        int g = abs(cx - 1) + abs(cy - 1);
        int h = (goalX != -1 && goalY != -1) ? abs(goalX - cx) + abs(goalY - cy) : -1;
        int f = (h != -1) ? g + h : -1;

        if (h != -1)
            printf("현재 위치 [%c, %d] → g: %d, h: %d, f: %d\n", y, x, g, h, f);
        else
            printf("현재 위치 [%c, %d] → g: %d, h: -, f: -\n", y, x, g);

        int key = _getch();
        switch (key) {
        case LEFT: if (x > 1) x--; break;
        case RIGHT: if (x < 15) x++; break;
        case UP: if ((y - 'A') > 0) y--; break;
        case DOWN: if ((y - 'A') < 14) y++; break;
        case 27: running = 0; break; // ESC
        case 13: // ENTER
            if (field[y - 'A' + 1][x] == 0 || field[y - 'A' + 1][x] == '*' || field[y - 'A' + 1][x] == -4) {
                field[y - 'A' + 1][x] = -1;
                for (int i = 1; i <= 15; i++)
                    for (int j = 1; j <= 15; j++)
                        if (field[i][j] == '*' || field[i][j] == -4)
                            field[i][j] = 0;
                if (goalX != -1 && goalY != -1)
                    A_star(1, 1, goalX, goalY);
            }
            break;
        case 'D':
        case 'd':
            if (goalX != -1 && goalY != -1) {
                for (int i = 1; i <= 15; i++)
                    for (int j = 1; j <= 15; j++)
                        if (field[i][j] == '*' || field[i][j] == -4)
                            field[i][j] = 0;
                tmforldkfrhflwma(1, 1, goalX, goalY);
            }
            break;
        case 32: // SPACE
            if (field[y - 'A' + 1][x] != -1) {
                if (goalX != -1 && goalY != -1 && field[goalY][goalX] == '@')
                    field[goalY][goalX] = 0;
                goalX = x;
                goalY = y - 'A' + 1;
                field[goalY][goalX] = '@';
                for (int i = 1; i <= 15; i++)
                    for (int j = 1; j <= 15; j++)
                        if (field[i][j] == '*' || field[i][j] == -4)
                            field[i][j] = 0;
                A_star(1, 1, goalX, goalY);
            }
            break;
        case '/': // 장애물/목표 삭제
            if (field[y - 'A' + 1][x] == -1)
                field[y - 'A' + 1][x] = 0;
            else if (field[y - 'A' + 1][x] == '@') {
                field[y - 'A' + 1][x] = 0;
                goalX = goalY = -1;
                for (int i = 1; i <= 15; i++)
                    for (int j = 1; j <= 15; j++)
                        if (field[i][j] == '*' || field[i][j] == -4)
                            field[i][j] = 0;
            }
            if (goalX != -1 && goalY != -1) {
                for (int i = 1; i <= 15; i++)
                    for (int j = 1; j <= 15; j++)
                        if (field[i][j] == '*' || field[i][j] == -4)
                            field[i][j] = 0;
                A_star(1, 1, goalX, goalY);
            }
            break;
        case '\\':
            for (int i = 1; i <= 15; i++)
                for (int j = 1; j <= 15; j++)
                    field[i][j] = 0;
            goalX = goalY = -1;
            field[1][1] = -2;
            break;
        }

    }
    return 0;
}
